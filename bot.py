import telebot
import requests
import schedule
import time
import threading
import pickle
import os
from datetime import datetime

# ============ –ù–ê–°–¢–†–û–ô–ö–ò ============
TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–∞ Railway.")

bot = telebot.TeleBot(TOKEN)
user_criteria = {}
seen_ads = set()

# ============ –°–û–•–†–ê–ù–ï–ù–ò–ï / –ó–ê–ì–†–£–ó–ö–ê ============
def load_data():
    global user_criteria, seen_ads
    if os.path.exists('user_criteria.pkl'):
        with open('user_criteria.pkl', 'rb') as f:
            user_criteria = pickle.load(f)
    if os.path.exists('seen_ads.pkl'):
        with open('seen_ads.pkl', 'rb') as f:
            seen_ads = pickle.load(f)

def save_data():
    with open('user_criteria.pkl', 'wb') as f:
        pickle.dump(user_criteria, f)
    with open('seen_ads.pkl', 'wb') as f:
        pickle.dump(seen_ads, f)

load_data()

# ============ –ö–£–†–° USD ============
def get_usd_rate():
    try:
        url = "https://www.nbrb.by/api/exrates/rates/USD?parammode=2"
        r = requests.get(url, timeout=10)
        if r.status_code == 200:
            data = r.json()
            return float(data["Cur_OfficialRate"])
    except:
        pass
    return 3.2

# ============ –ü–ê–†–°–ò–ù–ì KUFAR ============
def parse_kufar():
    try:
        url = "https://api.kufar.by/search-api/v1/search/rendered-paginated?cat=1010&typ=let&lang=ru&rgn=7"
        headers = {"User-Agent": "Mozilla/5.0"}
        response = requests.get(url, headers=headers, timeout=15)
        if response.status_code != 200:
            return []
        data = response.json()
        ads = []
        for item in data.get("ads", [])[:10]:
            rooms = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            for p in item.get("ad_parameters", []):
                if p.get("p") == "rooms":
                    rooms = p.get("v")
            time_raw = item.get("list_time")
            time_str = datetime.fromisoformat(time_raw.replace("Z", "+00:00")).strftime("%d.%m.%Y %H:%M") if time_raw else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            price_usd = item.get("price_usd", None)
            ads.append({
                "source": "Kufar",
                "title": item.get("subject", "–ù–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞"),
                "price_usd": float(price_usd) if price_usd else None,
                "location": item.get("region_name", "–ù–µ—Ç –ª–æ–∫–∞—Ü–∏–∏"),
                "rooms": rooms,
                "description": item.get("body", "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"),
                "link": f"https://www.kufar.by/item/{item.get('ad_id')}",
                "time": time_str
            })
        return ads
    except:
        return []

# ============ –ü–ê–†–°–ò–ù–ì ONLINER ============
def parse_onliner():
    try:
        url = "https://ak.api.onliner.by/search/apartments?rent_type[]=1_room"
        headers = {"User-Agent": "Mozilla/5.0"}
        response = requests.get(url, headers=headers, timeout=15)
        if response.status_code != 200:
            return []
        data = response.json()
        ads = []
        for item in data.get("apartments", [])[:10]:
            time_raw = item.get("last_time_up")
            time_str = datetime.fromisoformat(time_raw).strftime("%d.%m.%Y %H:%M") if time_raw else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            price_usd = float(item["price"]["amount"]) if "price" in item else None
            ads.append({
                "source": "Onliner",
                "title": item.get("title", "–ù–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞"),
                "price_usd": price_usd,
                "location": item.get("location", {}).get("address", "–ù–µ—Ç –ª–æ–∫–∞—Ü–∏–∏"),
                "rooms": item.get("rent_type", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
                "description": item.get("contact", {}).get("owner", "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"),
                "link": item.get("url", ""),
                "time": time_str
            })
        return ads
    except:
        return []

# ============ –ü–†–û–í–ï–†–ö–ê –ò –û–¢–ü–†–ê–í–ö–ê ============
def check_and_send_ads(chat_id):
    criteria = user_criteria.get(chat_id, {})
    max_price_usd = criteria.get("max_price", float("inf"))
    rooms = criteria.get("rooms", None)
    city = criteria.get("city", "").lower()
    usd_rate = get_usd_rate()
    all_ads = parse_kufar() + parse_onliner()
    new_ads = []

    for ad in all_ads:
        if ad["link"] in seen_ads:
            continue
        price_usd = ad.get("price_usd")
        if not price_usd:
            continue
        if price_usd > max_price_usd:
            continue
        if city and city not in ad["location"].lower():
            continue
        if rooms and rooms not in str(ad["rooms"]):
            continue
        new_ads.append(ad)
        seen_ads.add(ad["link"])

    save_data()

    for ad in new_ads:
        try:
            price_usd = ad["price_usd"]
            price_byn = round(price_usd * usd_rate, 2)
            message = (
                f"üè† –ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ ({ad['source']})\n"
                f"<b>{ad['title']}</b>\n"
                f"üí∞ –¶–µ–Ω–∞: {price_usd} USD (~{price_byn} BYN)\n"
                f"üìç –õ–æ–∫–∞—Ü–∏—è: {ad['location']}\n"
                f"üõè –ö–æ–º–Ω–∞—Ç—ã: {ad['rooms']}\n"
                f"üïí –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {ad['time']}\n"
                f"üìñ {ad['description']}\n"
                f"üîó <a href='{ad['link']}'>–°–º–æ—Ç—Ä–µ—Ç—å</a>"
            )
            bot.send_message(chat_id, message, parse_mode="HTML", disable_web_page_preview=True)
        except:
            pass

# ============ –ö–û–ú–ê–ù–î–´ ============
@bot.message_handler(commands=["start"])
def start(message):
    bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç! –Ø –∏—â—É –∫–≤–∞—Ä—Ç–∏—Ä—ã –Ω–∞ Kufar –∏ Onliner.\n"
                          "–£—Å—Ç–∞–Ω–æ–≤–∏ –∫—Ä–∏—Ç–µ—Ä–∏–∏: /set_criteria <–≥–æ—Ä–æ–¥> <–º–∞–∫—Å_—Ü–µ–Ω–∞_USD> <–∫–æ–º–Ω–∞—Ç—ã?>")

@bot.message_handler(commands=["set_criteria"])
def set_criteria(message):
    try:
        args = message.text.split()[1:]
        city = args[0]
        max_price = float(args[1])
        rooms = args[2] if len(args) > 2 else None
        user_criteria[message.chat.id] = {"city": city, "max_price": max_price, "rooms": rooms}
        setup_schedule()
        save_data()
        bot.reply_to(message, f"‚úÖ –ö—Ä–∏—Ç–µ—Ä–∏–∏: –ì–æ—Ä–æ–¥={city}, –¶–µ–Ω–∞ –¥–æ {max_price} USD, –ö–æ–º–Ω–∞—Ç—ã={rooms or '–ª—é–±—ã–µ'}")
    except:
        bot.reply_to(message, "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π: /set_criteria <–≥–æ—Ä–æ–¥> <–º–∞–∫—Å_—Ü–µ–Ω–∞_USD> <–∫–æ–º–Ω–∞—Ç—ã?>")

@bot.message_handler(commands=["check_now"])
def check_now(message):
    if message.chat.id in user_criteria:
        check_and_send_ads(message.chat.id)
        bot.reply_to(message, "üîé –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")
    else:
        bot.reply_to(message, "–°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏ –∫—Ä–∏—Ç–µ—Ä–∏–∏ —á–µ—Ä–µ–∑ /set_criteria")

# ============ –†–ê–°–ü–ò–°–ê–ù–ò–ï ============
def setup_schedule():
    schedule.clear()
    for chat_id in user_criteria.keys():
        schedule.every(1).minutes.do(check_and_send_ads, chat_id=chat_id)

def scheduler_thread():
    while True:
        schedule.run_pending()
        time.sleep(1)

# ============ –ó–ê–ü–£–°–ö ============
if __name__ == "__main__":
    setup_schedule()
    threading.Thread(target=scheduler_thread, daemon=True).start()
    bot.infinity_polling()
